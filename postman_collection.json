{
	"info": {
		"_postman_id": "68f8d34e-a738-42e7-89d0-c6a2bf9fe81b",
		"name": "API Training: First API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20862079"
	},
	"item": [
		{
			"name": "Status",
			"item": [
				{
					"name": "Simple Book URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response);\r",
									"console.log(response.message);\r",
									"\r",
									"//pm.test(\"The message value of the test should be Welcome to the Simple Books API. \", function (){\r",
									"    //pm.expect(response.message).to.eql(\"Welcome to the Simple Books API.\")\r",
									"//});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Welcome to the Simple Books API\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response);\r",
									"console.log(response.text);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/status",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get List of Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response);\r",
									"\r",
									"const AvailableBooks = response.filter((book) => book.available === true);\r",
									"console.log(AvailableBooks);\r",
									"\r",
									"const NonAvailableBooks = response.filter((book) => book.available === false);\r",
									"console.log(NonAvailableBooks);\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction);\r",
									"\r",
									"const NonFiction = response.filter((book) => book.type === \"non-fiction\");\r",
									"console.log(NonFiction[1].id);\r",
									"\r",
									"\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"const Fiction2 = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"console.log(Fiction2[0].id);\r",
									"\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Vanishing Half is \", function () {\r",
									"    pm.expect(Fiction[0].id).eql(1)\r",
									"});\r",
									"\r",
									"pm.test(\"Search for a book name called The Vanishing Half\", function () {\r",
									"    pm.expect(response[2].name).to.eql(\"The Vanishing Half\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction2[0].id);\r",
									"\r",
									"const book = Fiction2[0];\r",
									"\r",
									"pm.test(\"book found\", () => {\r",
									"    pm.expect(book).to.be.an('object');\r",
									"    pm.expect(book.available).to.be.true;\r",
									"    pm.expect(book.available).to.eql(true);\r",
									"    pm.expect(book.type).to.eql('fiction');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/books",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "25",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log(response.author);",
									"",
									"",
									"pm.test(\"Is in stock\", () => {",
									"    pm.expect(response[\"current-stock\"]).to.be.eql(1021);",
									"});",
									"",
									"postman.setNextRequest('Submit an order');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/books/:bookId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books",
								":bookId"
							],
							"query": [
								{
									"key": "id",
									"value": "1",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "bookId",
									"value": "{{bookId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place Order",
			"item": [
				{
					"name": "Register an API Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code name has string Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"clientName\": \"sola\",\n   \"clientEmail\": \"slljhgcpi@demi.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api-clients/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log(response);",
									"",
									"pm.globals.set(\"OrderId\", response.orderId);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"bookId\": {{bookId}},\n  \"customerName\": \"{{$randomFullName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Orders",
			"item": [
				{
					"name": "Get an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": {{bookId}},\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Existing Order",
			"item": [
				{
					"name": "Update an order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John {{$randomLastName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders/:orderId/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId",
								""
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{OrderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Order",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.get(\"variable_key\");",
					"pm.variables.get(\"variable_key\");",
					"pm.globals.unset(\"variable_key\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "ff309826f83fd53d12ea4d8be66212734abb904a2c3d0dcc080551cdda47ba38",
			"type": "string"
		}
	]
}